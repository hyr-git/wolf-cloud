<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 -->
  <modelVersion>4.0.0</modelVersion>
  <!-- 项目的的唯一标识符，并且配置时生成的路径也是由此生成，maven会将该项目打成的jar包放本地路径：/com/springcloud --> 
  <groupId>com.hyr</groupId>
  <!-- 构件的标识符，它和group ID一起唯一标识一个构件，一个groupId下面可能多个项目，就是靠artifactId来区分的。
  Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等 -->
  <artifactId>wolf-cloud</artifactId>
  <!-- 项目当前版本号，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>0.0.1-SNAPSHOT</version>
  <!-- 项目产生的构件类型，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->
  <packaging>pom</packaging>
  <!-- 项目的名称, Maven产生的文档用 --> 
  <name>wolf-cloud</name>
  <!-- 项目主页的URL, Maven产生的文档用 -->
  <url>http://maven.apache.org</url>

   <!-- 全局版本配置 -->
    <properties>
        
        <!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的编码 -->
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
 
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        <java.version>1.8</java.version>
        
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>        
        <spring-cloud.version>Hoxton.SR3</spring-cloud.version>
        <mysql-connector>5.1.39</mysql-connector>
        <druid.version>1.1.14</druid.version>
        <swagger2.version>2.8.0</swagger2.version>
        <swagger2-ui.version>2.8.0</swagger2-ui.version>
        <velocity.version>2.0</velocity.version>
        <fastjson.version>1.2.62</fastjson.version>
        <okhttp.version>4.2.2</okhttp.version>
        <poi.version>3.17</poi.version>
        <modelmapper.version>2.0.0</modelmapper.version>
        <apache.common.lang3.version>3.7</apache.common.lang3.version>
       <!--  
        <junit-version>4.13-rc-1</junit-version>
        
        <UserAgentUtils.version>1.21</UserAgentUtils.version>
        <httpclient.version>4.5.10</httpclient.version>
        <commons-lang3.version>3.9</commons-lang3.version>
        <easyexcel.version>2.1.3</easyexcel.version>
        <gson.version>2.8.5</gson.version>
        <fastjson.version>1.2.62</fastjson.version> -->
        <!--<activiti.version>6.0.0</activiti.version>-->
    </properties>
  
  <!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。坐标包括group ID，artifact ID和 version。 --> 
  <parent>
    <!-- 被继承的父项目的唯一标识符 -->
    <groupId>org.springframework.boot</groupId>
    <!-- 被继承的父项目的构件标识符 -->
    <artifactId>spring-boot-starter-parent</artifactId>
    <!-- 被继承的父项目的版本 --> 
    <version>2.2.5.RELEASE</version>
  </parent>
  
  <modules>
    <!--注册中心项目-->
    <module>wolf-cloud-api</module>
    <module>wolf-cloud-common</module>
    <!-- 产品服务提供者集群 -->
    <module>wolf-cloud-provider-product</module>
    <module>wolf-cloud-provider-product2</module>
    <module>wolf-cloud-provider-product3</module>
    
    <!-- 产品服务hystrix -->
    <module>wolf-cloud-provider-product-hystrix</module>
    	
    <!-- 服务消费者,采用ribbon进行负载均衡 -->
    <module>wolf-cloud-consumer</module>
    
    <!-- 服务消费者,脱离eureka使用ribbon进行负载均衡 -->
    <module>wolf-cloud-consumer-ribbon</module>
    <!-- 使用Feign进行负载均衡处理  -->
    <module>wolf-cloud-consumer-feign</module>
	
	<!-- 使用Feign-hystrix进行负载均衡处理进行熔断处理  -->
    <module>wolf-cloud-consumer-feign-hystrix</module>
    
    <!-- 对某一项微服务进行监控 -->
    <module>wolf-cloud-consumer-feign-hystrix-dashboard</module>
    
    <!-- Turbine-集群实例监控 -->
    <module>wolf-cloud-consumer-turbine</module>
    
    <!-- service模块专门定义客户端的调用接口 -->
    <module>wolf-cloud-service</module>
    
    <!-- eureka中的security安全认证 -->
    <module>wolf-cloud-security</module>
    <module>wolf-cloud-eureka</module>
    <module>wolf-cloud-eureka2</module>
    <module>wolf-cloud-eureka3</module>
  
    
    <module>wolf-cloud-employee</module>
    
    <module>wolf-cloud-provider-user-hystrix</module>
    <module>wolf-cloud-gateway</module>
  </modules>
 
  <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。自动从项目定义的仓库中下载。--> 
  <dependencyManagement>
    <dependencies>
      <dependency>
        <!-- 依赖的group ID --> 
        <groupId>org.springframework.cloud</groupId>
        <!-- 依赖的artifact ID -->
        <artifactId>spring-cloud-dependencies</artifactId>
        <!-- 依赖的版本号。 在Maven 2里, 可以配置成版本号的范围。 -->
        <version>${spring-cloud.version}</version>
        <!-- 依赖类型。 -->
        <type>pom</type>
        <!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来
           - compile ：默认范围，用于编译 
           - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath 
           - runtime: 在执行时需要使用 
           - test: 用于test任务时使用 
           - system: 需要外在提供相应的元素。通过systemPath来取得 
           - systemPath: 仅用于范围为system。提供相应的路径 
           - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --> 
        <scope>import</scope>
      </dependency>
      
      <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.31</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.hyr</groupId>
            <artifactId>wolf-cloud-api</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.hyr</groupId>
            <artifactId>wolf-cloud-common</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.hyr</groupId>
            <artifactId>wolf-Cloud-service</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.hyr</groupId>
            <artifactId>wolf-cloud-security</artifactId>
        </dependency>
    </dependencies>
  </dependencyManagement>
  <build>
        <finalName>wolf-cloud</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <delimiters>
                        <delimiter>$</delimiter>
                    </delimiters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source><!-- 源代码使用的开发版本 -->
                    <target>${java.version}</target><!-- 需要生成的目标class文件的编译版本 -->
                </configuration>
            </plugin>
        </plugins>
    </build>
  <!--使用aliyun镜像-->
  <repositories>
    <repository>
      <id>alimaven</id>
      <name>Maven Aliyun Mirror</name>
      <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>
</project>